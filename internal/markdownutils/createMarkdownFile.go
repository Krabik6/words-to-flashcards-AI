package markdownutils

import (
	"fmt"
	"log"
	"os"
)

// CreateMarkdownFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π Markdown-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª.
// fileName: –ø—É—Ç—å –∏ –∏–º—è —Ñ–∞–π–ª–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç.
// content: Markdown-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
func CreateMarkdownFile(fileName, content string) error {
	content = AddHeaderToFront(content)
	err := os.WriteFile(fileName, []byte(content), 0644)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ %s: %v\n", fileName, err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
	}
	log.Printf("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: %s\n", fileName)
	return nil
}

// AddHeaderToFront –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–æ Markdown-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
func AddHeaderToFront(content string) string {
	header := `---
type: flashcard
tags:
  - üÉè
---
`
	return header + content
}
